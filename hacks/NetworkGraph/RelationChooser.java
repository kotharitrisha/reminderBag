/** * RelationChooser.java * * (c) 2000 Wibi Internet */package com.wibinet.networks;import java.awt.*;import java.awt.event.*;import java.util.*;import javax.swing.*;public class RelationChooser extends JPanel implements ItemListener,	ActionListener, RelationChangeListener{  protected JComboBox cbRelationNames;  protected String[] relationNames;  protected NetworkData nData;  protected Vector relationChangeListeners;  public RelationChooser(NetworkData nData)  {    super(new FlowLayout(FlowLayout.LEFT));    this.nData = nData;    JLabel text = new JLabel("Relation: ");    add(text);        cbRelationNames = new JComboBox();    // cbRelationNames.setEditable(true);		cbRelationNames.setEditable(false);    cbRelationNames.addItemListener(this);    cbRelationNames.getEditor().addActionListener(this);    relationNames = null;    this.updateRelationNames(0);    add(cbRelationNames);        relationChangeListeners = new Vector();  }    public void setNetwork(NetworkData nData, boolean retainIdx)  {	  this.nData = nData;	  relationNames = null;	  if(retainIdx)	  {		  int selectedIdx = cbRelationNames.getSelectedIndex();		  this.updateRelationNames(selectedIdx);	  }	  else	  {		  this.updateRelationNames(0);	  }  }    public int getSelectedIndex()  {	  return cbRelationNames.getSelectedIndex();  }    public void addRelationChangeListener(RelationChangeListener rcl)  {  	relationChangeListeners.addElement(rcl);  }    public void removeRelationChangeListener(RelationChangeListener rcl)  {  	relationChangeListeners.removeElement(rcl);  }  	protected void fireRelationChangeEvent(RelationChangeEvent rce)	{		for(int i=0; i<relationChangeListeners.size(); i++)		{			RelationChangeListener rcl = 				(RelationChangeListener)relationChangeListeners.elementAt(i);			rcl.relationChanged(rce);		}	}  	public void relationChanged(RelationChangeEvent rce)	{		switch(rce.getType())		{			case RelationChangeEvent.SELECTED:				cbRelationNames.setSelectedIndex(rce.getRelationIndex());				break;						case RelationChangeEvent.CHANGED:				// try to avoid this possible infinite loop				if(!rce.getSource().equals(this))				{					updateRelationNames(rce.getRelationIndex());				}				break;						case RelationChangeEvent.INSERTED:			case RelationChangeEvent.DELETED:				if(!rce.getSource().equals(this))				{					updateRelationNames(rce.getRelationIndex());				}				break;		}	}	public void updateRelationNames(int relIdx)	{		int relCt = nData.getRelationCount();		relationNames = new String[relCt];		for(int ri=0; ri<relationNames.length; ri++)		{			relationNames[ri] = nData.getRelation(ri).getName();		}		updateComboBoxModel();				// I'm not sure if this check should be here...		if(relIdx < relCt)		{			cbRelationNames.setSelectedIndex(relIdx);		}		else		{			cbRelationNames.setSelectedIndex(relCt-1);		}  }    protected void updateComboBoxModel()  {    ComboBoxModel cbm = new DefaultComboBoxModel(relationNames);    cbRelationNames.setModel(cbm);  }    public void itemStateChanged(ItemEvent ie)  {    int currentRelation = cbRelationNames.getSelectedIndex();    if(currentRelation != -1)    {			fireRelationChangeEvent(new RelationChangeEvent(this,				RelationChangeEvent.SELECTED, currentRelation));	  }	  else	  {	  	System.out.println("RelationChooser.itemStateChanged(): daPhuck?");	  }  }    public void actionPerformed(ActionEvent ae)  {  	// update relation names model  	ComboBoxEditor editor = cbRelationNames.getEditor();  	String newRelName = editor.getItem().toString();    int relIdx = cbRelationNames.getSelectedIndex();    relationNames[relIdx] = newRelName;  	updateComboBoxModel();  	    if(relIdx != -1)    {			fireRelationChangeEvent(new RelationChangeEvent(this,				RelationChangeEvent.CHANGED, relIdx));	  }	  else	  {	  	System.out.println("RelationChooser.actionPerformed(): daPhuck?");	  }  }}