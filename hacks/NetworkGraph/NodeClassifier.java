/** * NodeClassifier.java * * (c) 2000 Wibi Internet */package com.wibinet.networks;import com.wibinet.math.Matrix;import java.util.*;public class NodeClassifier extends Object{  protected NodeDistanceMeasure measure;  protected int opCt;  protected long solveTime;    public NodeClassifier(NodeDistanceMeasure measure)  {    this.measure = measure;    this.opCt = 0;    this.solveTime = 0;  }      public Matrix getDistanceMatrix(NetworkData network)  {    opCt = 0;    solveTime = 0;    int size = network.getSize();    Matrix equivMatrix = new Matrix(size);    for(int r=0; r<size; r++)    {      equivMatrix.setValueAt(r, r, 0.0); // defining distance between node and itself as 0.0      for(int c=r+1; c<size; c++)      {        // System.out.println("Solving for ("+r+", "+c+")");        double dist = measure.getDistance(network, r, c);        opCt += measure.getOperationCount();        solveTime += measure.getSolveTime();        equivMatrix.setValueAt(r, c, dist);        equivMatrix.setValueAt(c, r, dist);      }    }    return equivMatrix;  }    public void getSumn(Matrix distanceMatrix)  {    double classedDist = -1.0; // greatest distance classed    Vector classSets = new Vector();    int size = distanceMatrix.getRows();    while(true)    {      // find minimum distance in matrix greater than that already found      double minDist = 1000000.0; // Double.MAXIMUM_VALUE?      for(int r=0; r<size; r++)      {        for(int c=r+1; c<size; c++)        {          double dist = distanceMatrix.getValueAt(r, c);          if(dist > classedDist)          {            if(dist < minDist)            {              minDist = dist;            }          }        }      }            // get equivalence classes at this sensitivity      classedDist = minDist;      int[] equivClasses = getEquivalenceClasses(distanceMatrix, classedDist);      classSets.addElement(equivClasses);    }  }    public int[] getEquivalenceClasses(NetworkData network)  {    int size = network.getSize();    Matrix distMatrix = getDistanceMatrix(network);    // System.out.println("Check Count: " + checkCt);    // System.out.println("Distance Matrix:");    // distMatrix.print();    return getEquivalenceClasses(distMatrix, 0.0);  }  // currently implements 'single link'?  public int[] getEquivalenceClasses(Matrix distMatrix, double sensitivity)  {    // use equivalence matrix to develop classes    int size = distMatrix.getRows();    int[] equivClasses = new int[size];    for(int i=0; i<size; i++)    {      equivClasses[i] = -1;    }    int classNum = 0;    for(int n1=0; n1<size; n1++)    {      // have we put this in a class yet?      if(equivClasses[n1] == -1)      {        // put this in current class        equivClasses[n1] = classNum;	      for(int n2=n1+1; n2<size; n2++)	      {	        if(distMatrix.getValueAt(n1, n2) <= sensitivity)	        {	          equivClasses[n2] = classNum;	        }	      }	      classNum++;	    }    }    return equivClasses;  }    public int getOperationCount()  {    return opCt;  }    public long getSolveTime()  {    return solveTime;  }}