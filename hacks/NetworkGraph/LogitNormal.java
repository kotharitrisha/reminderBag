/** * LogitNormal.java * * A poorly conceptualized class hacked together to * do some calculations for Logit Normals (which are * surely mis-named). * * Author: Christopher Wheat * * (c) 2001 Wibi Internet */package com.wibinet.networks;import com.wibinet.math.ExtendedMath;public class LogitNormal extends Object{	protected static double[][] cumulativeSums;	protected static final int MAX_SUMS = 4;	protected static final double INT_STEP = 0.05;		static	{		java.text.NumberFormat fmt = java.text.NumberFormat.getNumberInstance();		fmt.setMaximumFractionDigits(3);		cumulativeSums = new double[MAX_SUMS][];		for(int d=1; d <= MAX_SUMS; d++)		{			// System.out.print("d="+d);			cumulativeSums[d-1] = new double[1 << d]; // 2^d;			double stdev = 2.0 / ((double)d);			for(int xVal=0; xVal<cumulativeSums[d-1].length; xVal++)			{				double mean = Math.pow(2.0, -d) * (0.5 + xVal);				cumulativeSums[d-1][xVal] = 0.0;								// sum it up				for(double x=0.0; x<1.0; x += INT_STEP)				{					double avgX = x + INT_STEP/2;					double pValue =						ExtendedMath.getGaussian(stdev, ExtendedMath.lg(avgX/(1-avgX)), mean);					cumulativeSums[d-1][xVal] += pValue;					// System.out.println("d=" + d + " xVal=" + xVal +					//  " x=" + x + " pValue="+pValue);				}				// System.out.print(" " + fmt.format(cumulativeSums[d-1][xVal]));			}			// System.out.println();		}	}		public static int getXVal(double x, int precision)	{		double resolution = Math.pow(2, -precision);		x -= resolution/2;		return (int)(x/resolution);	}		public static double getValue(int precision, int xVal, double x)	{		if(precision == 0)		{			return 1.0;		}				double stdev = 2.0 / ((double)precision);		double mean = Math.pow(2.0, -precision) * (0.5 + xVal);				double unnormVal =			ExtendedMath.getGaussian(stdev, ExtendedMath.lg(x/(1-x)), mean);		double value =			unnormVal / cumulativeSums[precision-1][xVal];		return value;	}}